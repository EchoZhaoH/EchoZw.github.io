<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EchoZh</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://echozw.github.io/"/>
  <updated>2018-02-08T05:51:53.000Z</updated>
  <id>http://echozw.github.io/</id>
  
  <author>
    <name>Zhao Hua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css居中技巧</title>
    <link href="http://echozw.github.io/2018/02/08/css-center-tip/"/>
    <id>http://echozw.github.io/2018/02/08/css-center-tip/</id>
    <published>2018-02-08T05:18:51.000Z</published>
    <updated>2018-02-08T05:51:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><pre><code>    .parent {        text-align: center;    }    .child {        display: inline-block;    }    .child {        display: table;        margin: 0 auto;    }</code></pre><pre><code>    .parent {         position: relative;    }    .child {        position: absolute;        left: 50%;        transform: translateX(-50%);    }</code></pre><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul><li><code>table-cell</code>配和<code>vertical-align</code><pre><code>  .parent {      display: table-cell;      vertical-align: middle;  }</code></pre></li><li><code>absolute</code>配合<code>transform</code><pre><code>  .parent {      position: relative;  }  .child {      position: absolute;      top: 50%;      transform: translateY(-50%);  }</code></pre></li></ul><h3 id="水平-垂直居中"><a href="#水平-垂直居中" class="headerlink" title="水平+垂直居中"></a>水平+垂直居中</h3><ul><li><code>inline-block</code>配合<code>text-align</code>加上<code>table-cell</code>配合<code>vertical-align</code><pre><code>  .parent {      display: table-cell;      vertical-align: middle;      text-align: center;  }  .child {      display: inline-block;  }</code></pre><pre><code>  .parent {      position: relative;  }  .child {      position: absolute;      top: 50%;      left: 50%;      transform: translate(-50%, -50%);  }</code></pre></li></ul><h3 id="全能的flex"><a href="#全能的flex" class="headerlink" title="全能的flex"></a>全能的flex</h3><pre><code>    .parent {        display: flex;        justify-content: center;    }</code></pre><pre><code>    .parent {        display: flex;        align-item: center;    }</code></pre><pre><code>    .parent {        display: flex;        justify-content: center;        align-item: center;    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;水平居中&quot;&gt;&lt;a href=&quot;#水平居中&quot; class=&quot;headerlink&quot; title=&quot;水平居中&quot;&gt;&lt;/a&gt;水平居中&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;
    .parent {
        text-align: center;
    }
    .
      
    
    </summary>
    
      <category term="css-tips" scheme="http://echozw.github.io/categories/css-tips/"/>
    
    
      <category term="css" scheme="http://echozw.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>趣味解读js中的call和apply</title>
    <link href="http://echozw.github.io/2017/12/19/fnc-call-apply/"/>
    <id>http://echozw.github.io/2017/12/19/fnc-call-apply/</id>
    <published>2017-12-19T06:33:46.000Z</published>
    <updated>2017-12-19T07:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数调用的前世今生"><a href="#函数调用的前世今生" class="headerlink" title="函数调用的前世今生"></a>函数调用的前世今生</h3><p>先来讲一个故事啊，从前有个叫函数的小孩，孩子还小嘛，长得挺精致，天性活泼，什么都敢说，什么都敢玩，<br>这个时候的函数长这样 <code>fnc.call()</code> 或者 这样 <code>fnc.apply()</code>,<br>这个时候的函数特别单纯别人想看什么，他就给别人看什么，<br>这个时候的函数调用是这样的 <code>fnc.call(window, param1, param2,…)</code> &amp; <code>fnc.apply(window, params)</code><br><code>window -&gt;</code> 外界环境的影响（也就是我们所说的作用域） 至于这个 <code>param1,param2,..</code> &amp; <code>params</code> 就是外界传授给小孩的知识 （也就是我们的参数）</p><p>然后。。。。。n多年之后，函数长大了，人情事故变的更加圆润，性格变得内敛，然后<br>函数就长成了这样<br><code>fnc(param1,param2,…)</code> &amp; <code>fnc(params)</code><br>他隐藏了外界的影响，导致人们再也看不到他的内心的想法，也无法改变它内心的想法，于是，<br>作用域就变的难以掌控<br><code><br>    function () {<br>        this // 我的天这个this代表什么啊，来位大神讲下啊<br>    }<br></code><br>于是刚入门的小白或者新手就对this，产生了莫名的恐惧，<br>比如下面这种情况<br><img src="/2017/12/19/fnc-call-apply/fnc1.png" alt="示例1" title="示例1"></p><p>嗯，‘元芳，你怎么看’，哦，不是，我们来看下他们两个为什么结果不一样呢，首先我们肯定是先分析<code>this.name</code>既然<code>name</code>的值在第一个函数中为空，那我们就来看下<code>this</code>吧，于是就有了以下代码<br><img src="/2017/12/19/fnc-call-apply/fnc2.png" alt="示例2" title="示例2"><br>现在我们是不是如同恍然大梦呢，原来是this变了，window里面99%没有name这个属性啊（免不了有人跟我抬杠）,然后肯定就为空了，嗯，现在<br>让我们回头看下小时候的函数吧</p><p><code>fnc.call() &amp; fnc.apply()</code></p><p>终于想起来这个了，我们就倒流时间回到函数小时候，用小时候的函数解决这个问题，哈哈，是不是很聪明</p><p>于是我们有了以下代码<br><img src="/2017/12/19/fnc-call-apply/fnc3.png" alt="示例3" title="示例3"></p><h3 id="回到正题，我们讲解下call-和-apply的用法"><a href="#回到正题，我们讲解下call-和-apply的用法" class="headerlink" title="回到正题，我们讲解下call 和 apply的用法"></a>回到正题，我们讲解下call 和 apply的用法</h3><ul><li><strong>call apply的最终目的是一样的</strong><br>call和apply的目的都是在运行函数时，指定函数的作用域（也就是this,this与作用域是紧密相连的）,call是明确参数个数和参数个数较少时使用，apply是不明确参数个数和参数个数较多时使用</li><li><strong>用法</strong><br><pre><br>  function Person () {<pre><code>this.name = &apos;hank&apos;;</code></pre>  }<br>  var person = new Person();<br>  function sayhello() {<pre><code>// 此时我们肯定是没有name的，毕竟name是person的啊console.log(this.name + &apos; say hello&apos;);</code></pre>  }<br>  // 但是，我们需要name啊，怎么办，只能借呗<br>  sayhello.call(person)<br>  : hank say hello<br></pre><br><strong>apply</strong> 用法同call<br><strong>注意：  </strong>最后再给新手一个建议，在你写代码的初期，尽量使用这种方式<code>fnc.call()</code> 和 <code>fnc.apply()</code> 来 替代 <code>fnc()</code>的函数调用的方式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数调用的前世今生&quot;&gt;&lt;a href=&quot;#函数调用的前世今生&quot; class=&quot;headerlink&quot; title=&quot;函数调用的前世今生&quot;&gt;&lt;/a&gt;函数调用的前世今生&lt;/h3&gt;&lt;p&gt;先来讲一个故事啊，从前有个叫函数的小孩，孩子还小嘛，长得挺精致，天性活泼，什么都敢说
      
    
    </summary>
    
      <category term="notes" scheme="http://echozw.github.io/categories/notes/"/>
    
    
      <category term="javascript" scheme="http://echozw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>H5 media标签获取多媒体对象问题</title>
    <link href="http://echozw.github.io/2017/12/19/h5media/"/>
    <id>http://echozw.github.io/2017/12/19/h5media/</id>
    <published>2017-12-19T06:21:55.000Z</published>
    <updated>2017-12-19T07:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取媒体对象的方式"><a href="#获取媒体对象的方式" class="headerlink" title="获取媒体对象的方式"></a>获取媒体对象的方式</h3><ul><li>创建媒体对象<br>var media = document.createElement(media)<br>现在我们已经可以拿到媒体对象了，但是要获取详细信息需等到媒体播放时我们才能拿到，这也是我们做一些视频或者音频上传时获取上传的媒体对象常用的做法。</li><li>获取媒体对象<br>看到网上很多人都说用loadstart事件获取媒体对象，经过亲身实践确实可以，但是当视频或者音频播放有网络延迟时，我们是拿不到对象的所有信息的，而使用canplay事件我们可以拿到对象的所有信息。</li></ul><p>笔记。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;获取媒体对象的方式&quot;&gt;&lt;a href=&quot;#获取媒体对象的方式&quot; class=&quot;headerlink&quot; title=&quot;获取媒体对象的方式&quot;&gt;&lt;/a&gt;获取媒体对象的方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建媒体对象&lt;br&gt;var media = document.creat
      
    
    </summary>
    
      <category term="notes" scheme="http://echozw.github.io/categories/notes/"/>
    
    
      <category term="javascript" scheme="http://echozw.github.io/tags/javascript/"/>
    
      <category term="H5" scheme="http://echozw.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>cordova打包vue项目</title>
    <link href="http://echozw.github.io/2017/10/05/cordova-vue/"/>
    <id>http://echozw.github.io/2017/10/05/cordova-vue/</id>
    <published>2017-10-05T10:53:55.000Z</published>
    <updated>2017-11-02T14:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>现在国内已经越来越多的使用vue进行混合app的开发，但是将vue项目打包成一个可安装的android apk文件却不是每个人都知道，在此记录下，方便以后自己使用。</p><footer><strong>echozh</strong></footer></blockquote><h3 id="准备资源"><a href="#准备资源" class="headerlink" title="准备资源"></a>准备资源</h3><p>我们需要node、npm、android SDK的环境支持在此就不进行node和npm的安装演示了。<br>在这里提供一个android SDK的安装装程序的百度网盘<a href="http://pan.baidu.com/s/1hs5WZjQ" title="android SDK" target="_blank" rel="external">android SDK</a> 的链接，密码：1hvk。也可以在官网上下载。</p><h3 id="第一步crodova的安装"><a href="#第一步crodova的安装" class="headerlink" title="第一步crodova的安装"></a>第一步crodova的安装</h3><p>如果已经安装可以跳过<br>全局安装<code>npm install -g cordova</code></p><h3 id="第二步新建crodova项目"><a href="#第二步新建crodova项目" class="headerlink" title="第二步新建crodova项目"></a>第二步新建crodova项目</h3><p>cmd下执行命令</p><p><pre><br>    <code><br>        cordova create cordovaApp com.cordova.testapp<br>        cd cordovaApp<br>        cordova platform add android<br>    </code><br></pre><br>cordovaApp为项目名称</p><h3 id="第三部修改vue项目"><a href="#第三部修改vue项目" class="headerlink" title="第三部修改vue项目"></a>第三部修改vue项目</h3><p>如果没有，可以百度进行创建</p><ul><li><strong>首先修改vue项目的index.html文件</strong><br>在head之间加入<br><pre><code><br>  &lt;meta http-equiv=”Content-Security-Policy” content=”default-src ‘self’ data: gap: <a href="https://ssl.gstatic.com" target="_blank" rel="external">https://ssl.gstatic.com</a> ‘unsafe-eval’; style-src ‘self’ ‘unsafe-inline’; media-src <em>; img-src ‘self’ data: content:;”&gt;<br>  &lt;meta name=”format-detection” content=”telephone=no”&gt;<br>  &lt;meta name=”msapplication-tap-highlight” content=”no”&gt;<br>  &lt;meta name=”viewport” content=”user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width”&gt;<br></em></code></pre><br>加入的&lt;meta http-equiv=”Content-Security-Policy” content=”default-src ‘self’ data: gap: <a href="https://ssl.gstatic.com" target="_blank" rel="external">https://ssl.gstatic.com</a> ‘unsafe-eval’; style-src ‘self’ ‘unsafe-inline’; media-src ; img-src ‘self’ data: content:;”&gt;<br><strong>有可能会改变页面样式的改变，如果改变则不要加，否则一定要加</strong><br>然后引入cordova.js<br><pre><code><br>  &lt;body&gt;<br>   &lt;div id=”app”&gt;&lt;/div&gt;<br>   &lt;script type=”text/javascript” src=”cordova.js”&gt;&lt;/script&gt;<br>   &lt;!– built files will be auto injected –&gt;<br>  &lt;/body&gt;<br></code></pre><br><strong>新加入的cordova.js在浏览器运行时会报错，这个到时候当你打包成apk文件在手机上运行就不会报错了</strong><br><strong>然后修改src中的main.js为以下代码</strong><br><pre><code><br>  // The Vue build version to load with the <code>import</code> command<br>  // (runtime-only or standalone) has been set in webpack.base.conf with an alias.<br>  import Vue from ‘vue’ import App from ‘./App’<br>  import router from ‘./router’<br>  Vue.config.productionTip = false<br>  /<em> eslint-disable no-new </em>/<br>  document.addEventListener(‘deviceready’, function()<br>  { <pre><code>new Vue({     el: &apos;#app&apos;,     router,     store,     template: &apos;&lt;App/&gt;&apos;,     components: { App } }) window.navigator.splashscreen.hide() </code></pre>  }, false);<br></code></pre><br><strong>最后修改config文件夹中的index.js文件</strong><br>修改build模块中的<br><pre><code><br>   assetsSubDirectory: ‘static’,<br>   assetsPublicPath: ‘/‘,<br></code></pre><br>修改为<br><pre><code><br>   assetsSubDirectory: ‘’,<br>   assetsPublicPath: ‘’,<br></code></pre><br>然后运行<code>npm run dev</code><br>如果能够正常运行，说明没有问题</li></ul><h3 id="第四步将打包好的vue文件放到cordova项目中进行打包"><a href="#第四步将打包好的vue文件放到cordova项目中进行打包" class="headerlink" title="第四步将打包好的vue文件放到cordova项目中进行打包"></a>第四步将打包好的vue文件放到cordova项目中进行打包</h3><p>执行命令<br><code>npm run build</code><br>执行完成后会生成一个dist文件夹，找到这个文件夹将里面的所有文件复制到你的cordova项目的www文件夹下替换它原有的文件。<br>然后就可以执行<br><code>cordova build android</code><br>会生成一个可执行的apk文件，安装即可。<br>生成的apk文件在我们的项目路径下<code>cordovaApp\platforms\android\build\outputs\apk\android-debug.apk</code><br>到这里就完成了我们vue项目的打包。</p><h3 id="需注意"><a href="#需注意" class="headerlink" title="需注意"></a>需注意</h3><p>当执行<code>cordova build android</code>命令时可能会出错，若出错请检查你的android SDK是否安装成功以及环境是否配置成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;现在国内已经越来越多的使用vue进行混合app的开发，但是将vue项目打包成一个可安装的android apk文件却不是每个人都知道，在此记录下，方便以后自己使用。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/foote
      
    
    </summary>
    
      <category term="移动端" scheme="http://echozw.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="crodova" scheme="http://echozw.github.io/tags/crodova/"/>
    
      <category term="vue" scheme="http://echozw.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>jstools-LazyMan</title>
    <link href="http://echozw.github.io/2017/09/02/jstools-LazyMan/"/>
    <id>http://echozw.github.io/2017/09/02/jstools-LazyMan/</id>
    <published>2017-09-02T14:38:55.000Z</published>
    <updated>2017-11-02T14:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一个意外"><a href="#一个意外" class="headerlink" title="一个意外"></a>一个意外</h3><p>这个是我一次在饥人谷的知乎专栏看到的感觉挺好玩的就是这实现了下，中间也看过方方老师的讲解（至于用Promise，暂时还不太会）</p><p>还是直接贴代码吧，我实现过程中就是把一系列的链式调用看作为一个一个的指令，当叫到哪个指令时就把哪个指令压入到栈中然后再从栈中取出执行</p><p>代码实施过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">LayzMan</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> queue = []</div><div class="line"></div><div class="line">    <span class="keyword">let</span> task = &#123;</div><div class="line">        <span class="attr">wait</span>: <span class="function"><span class="keyword">function</span>(<span class="params">second</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">`Wake up after <span class="subst">$&#123;second&#125;</span>`</span>)</div><div class="line">                    next()</div><div class="line">                &#125;,second*<span class="number">1000</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">`Eat <span class="subst">$&#123;food&#125;</span>~`</span>)</div><div class="line">                next()</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">hi</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">`Hi! This is <span class="subst">$&#123;name&#125;</span>!`</span>)</div><div class="line">                next()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    queue.push(task.hi(name))</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> fn = queue.shift()</div><div class="line">        fn &amp;&amp; fn()</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 异步来达到效果</span></div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        next()</div><div class="line">    &#125;,<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> api = &#123;</div><div class="line">        <span class="attr">sleep</span>: <span class="function"><span class="keyword">function</span>(<span class="params">second</span>) </span>&#123;</div><div class="line">            queue.push(task.wait(second))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">sleepFirst</span>: <span class="function"><span class="keyword">function</span>(<span class="params">second</span>) </span>&#123;</div><div class="line">            queue.unshift(task.wait(second))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">eat</span>: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</div><div class="line">            queue.push(task.eat(food))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> api</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//LayzMan('Hank')</span></div><div class="line"><span class="comment">//LayzMan('Hank').sleep(3).eat('dinner')</span></div><div class="line"><span class="comment">//LayzMan('Hank').eat('dinner').eat('supper')</span></div><div class="line"><span class="comment">//LayzMan('Hank').sleepFirst(3).eat('supper')</span></div></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>大家有更好的想法的话可以和我沟通，欢迎随时交流<br>我的<strong>QQ ： 572712675</strong><br><strong>微信</strong><br><img src="/2017/09/02/jstools-LazyMan/weichart.png" alt="weichart.png" title=""><br>欢迎扫我</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一个意外&quot;&gt;&lt;a href=&quot;#一个意外&quot; class=&quot;headerlink&quot; title=&quot;一个意外&quot;&gt;&lt;/a&gt;一个意外&lt;/h3&gt;&lt;p&gt;这个是我一次在饥人谷的知乎专栏看到的感觉挺好玩的就是这实现了下，中间也看过方方老师的讲解（至于用Promise，暂时还不太会
      
    
    </summary>
    
      <category term="tools" scheme="http://echozw.github.io/categories/tools/"/>
    
    
      <category term="javascript" scheme="http://echozw.github.io/tags/javascript/"/>
    
      <category term="工具函数" scheme="http://echozw.github.io/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>用原生js实现一个简单的flatten</title>
    <link href="http://echozw.github.io/2017/09/02/jstools-flatten/"/>
    <id>http://echozw.github.io/2017/09/02/jstools-flatten/</id>
    <published>2017-09-02T13:44:45.000Z</published>
    <updated>2017-11-02T14:10:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>实现一个flatten函数，将一个嵌套多层的数组 array（数组） (嵌套可以是任何层数)转换为只有一层的数组，数组中元素仅基本类型的元素或数组，不存在循环引用的情况。Ex: flatten([1, [2], [3, [[4]]]]) =&gt; [1, 2, 3, 4];</p><h3 id="实现过程及想法"><a href="#实现过程及想法" class="headerlink" title="实现过程及想法"></a>实现过程及想法</h3><p>我拿到这个题目的第一眼就想到循环和递归，因为除了这种方法也没想出其他的方法，当然实现的过程中遇到点困惑<br><strong>初步思路</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</div><div class="line">    <span class="comment">// 首先我们需要判断input是否为数组</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> input === <span class="string">'Array'</span>)&#123;</div><div class="line">        ....</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> input</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><strong>遇到的第一个问题</strong><br><code>typeof input === ‘Array’</code>无法判断input是Array型<br><strong>解决方案</strong><br>利用对象的prototype来做判断,也可以用constructor<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">input</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(input) === <span class="string">'[object Array]'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><strong>初成的第一版</strong><br>输出结果<br><img src="/2017/09/02/jstools-flatten/flatten1.png" alt="flatten1.png" title=""><br>代码实施过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isArray(input))&#123;</div><div class="line">        <span class="keyword">var</span> output = []</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.length; i++)&#123;</div><div class="line">                <span class="keyword">var</span> value = input[i]</div><div class="line">                <span class="keyword">if</span>(isArray(input[i])) &#123;</div><div class="line">                    flatten(input[i])</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    output.push(value)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> output</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> input;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">input</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(input) === <span class="string">'[object Array]'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(flatten([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">7</span>,[[<span class="number">8</span>,<span class="number">9</span>],<span class="number">10</span>],[<span class="number">18</span>,[<span class="number">545</span>]]]]))</div></pre></td></tr></table></figure><br>后来我查找的时候发现output是一只被初始化的就相当于只保存了第一次的结果<br><strong>修改后的第二版</strong><br>既然是作用域的问题，那我把output作为参数传进去，提升output的作用域不就行了吗</p><p>代码实施过程<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">input, output</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (isArray(input))&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.length; i++)&#123;</div><div class="line"><span class="keyword">var</span> value = input[i]</div><div class="line"><span class="keyword">if</span>(isArray(input[i])) &#123;</div><div class="line">flatten(input[i], output)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">output.push(value)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> output</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> input;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">input</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(input) === <span class="string">'[object Array]'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> b = []</div><div class="line">    <span class="built_in">console</span>.log(flatten([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">7</span>,[[<span class="number">8</span>,<span class="number">9</span>],<span class="number">10</span>],[<span class="number">18</span>,[<span class="number">545</span>]]]],b))</div></pre></td></tr></table></figure><br>运行结果<br><img src="/2017/09/02/jstools-flatten/flatten2.png" alt="flatten2.png" title=""><br>而运行结果也是我们想要的<br><strong>但是这样实施感觉有点繁琐，别人只需要调你的函数来执行这个过程而已</strong><br>于是我的相对而言的最后一版出来了<br>代码实施过程（我在函数内部有新建了一个函数，利用闭包来解决，缺点是当在网页上进行解析大数据量的数组时会导致内存的大量消耗）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (isArray(input))&#123;</div><div class="line"><span class="keyword">var</span> output = []</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_flatten</span> (<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.length; i++)&#123;</div><div class="line"><span class="keyword">var</span> value = input[i]</div><div class="line"><span class="keyword">if</span>(isArray(input[i])) &#123;</div><div class="line">_flatten(input[i])</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">output.push(value)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">_flatten(input)</div><div class="line"><span class="keyword">return</span> output</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> input;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> (<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(input) === <span class="string">'[object Array]'</span>) &#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(flatten([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">7</span>,[[<span class="number">8</span>,<span class="number">9</span>],<span class="number">10</span>],[<span class="number">18</span>,[<span class="number">545</span>]]]]))</div></pre></td></tr></table></figure><br>运行结果<br><img src="/2017/09/02/jstools-flatten/flatten3.png" alt="flatten3.png" title=""></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>大家有更好的想法的话可以和我沟通，欢迎随时交流<br>我的<strong>QQ ： 572712675</strong><br><strong>微信</strong><br><img src="/2017/09/02/jstools-flatten/weichart.png" alt="weichart.png" title=""><br>欢迎扫我</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;实现一个flatten函数，将一个嵌套多层的数组 array（数组） (嵌套可以是任何层数)转换为只有一层的数组，数组中元素仅基本类型的元素
      
    
    </summary>
    
      <category term="tools" scheme="http://echozw.github.io/categories/tools/"/>
    
    
      <category term="javascript" scheme="http://echozw.github.io/tags/javascript/"/>
    
      <category term="工具函数" scheme="http://echozw.github.io/tags/%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用vue实现的todolist</title>
    <link href="http://echozw.github.io/2017/08/20/vue-todolist/"/>
    <id>http://echozw.github.io/2017/08/20/vue-todolist/</id>
    <published>2017-08-20T07:43:32.000Z</published>
    <updated>2017-11-02T14:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>第一次真正意义上自己使用vue实现的一个小工具，目前正在完善</p><footer><strong>echozh</strong></footer></blockquote><h3 id="Task-Manager演示地址"><a href="#Task-Manager演示地址" class="headerlink" title="Task Manager演示地址"></a>Task Manager演示地址</h3><p><a href="http://118.89.242.231/todolist#/all" title="Task Manager" target="_blank" rel="external">Task Manager</a> 的链接.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;第一次真正意义上自己使用vue实现的一个小工具，目前正在完善&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;Task-Manager演示地址&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="tools" scheme="http://echozw.github.io/categories/tools/"/>
    
    
      <category term="vue" scheme="http://echozw.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>我的解读之简述vue生命周期created、mounted(vue-1)</title>
    <link href="http://echozw.github.io/2017/08/19/vueUnderstand/"/>
    <id>http://echozw.github.io/2017/08/19/vueUnderstand/</id>
    <published>2017-08-18T16:14:45.000Z</published>
    <updated>2017-11-02T14:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>其实对于vue我一直想写点什么，一直没时间，又一直不敢码字，生怕自己错解一些东西</p><footer><strong>echozh</strong></footer></blockquote><p>说明：vue是我真正开始使用的一个前端的mvvm的框架<br>附上一个<a href="https://cn.vuejs.org/" title="官网" target="_blank" rel="external">Vue</a> 的链接.<br><img src="/2017/08/19/vueUnderstand/vuelogo.png" alt="vuelogo.png" title=""><br>我所希望的js的开发，就是面向对象的，而之前自己写的东西无外乎都是面向过程的，中途看过挺多的js的原型对象的讲解，但一直似懂非懂，<br>知道接触vue之后的一段时间，才有所领会。</p><p>vue这个实例会挂载一个id，之后这个id的dom结构里面的所有操作都会在vue这个实例中进行，说到这就不得不贴出一张vue的生命周期的钩子图了<br><img src="/2017/08/19/vueUnderstand/vuelife.png" alt="vue生命周期图" title="vue生命周期图"><br>在这个生命周期中我们就可以实现我们所有的操作，dom的改变，数据的渲染。</p><h3 id="我觉得第一个需要了解的Vue实例的生命周期"><a href="#我觉得第一个需要了解的Vue实例的生命周期" class="headerlink" title="我觉得第一个需要了解的Vue实例的生命周期"></a>我觉得第一个需要了解的Vue实例的生命周期</h3><p>(就我自己的一点看法，各位如果有更好的理解，欢迎随时交流)<br>写下几个我觉得新手比较需要的钩子<br><strong>1、created</strong></p><ul><li><strong>类型 ：</strong><code>Function</code></li><li><strong>详细 ：</strong><br>  实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，<code>$el</code>属性目前不可见</li><li><strong>我的理解 ：</strong><br>  这个时候我们可以准备我们所需要渲染到<strong>dom的数据</strong>，例如一些ajax的请求，但是这时Vue的虚拟dom还没挂载完成，<code>$el</code>无法访问，可以看下，下面的示例。  <img src="/2017/08/19/vueUnderstand/created.png" alt="vue实例created阶段" title="vue实例created阶段">  至于<code>$el</code>个人理解是vue的虚拟dom，会与实际dom的双向绑定。(或许有人会说现在我的dom既然可以拿到，为啥还要这么麻烦等待vue呢，对这样做是可以，但是那为啥还要使用vue，不就是为了更好的管理数据与dom吗，个人理解，不喜勿喷)。<br><strong>2、mounted</strong></li><li><strong>类型 ：</strong><code>Function</code></li><li><strong>详细 ：</strong><br>  <code>el</code>被新创建的<code>vm.$el</code>替换，并挂载到实例上去之后调用该钩子。如果<code>root</code>实例挂载了一个文档内元素，当<code>mounted</code>被调用时<code>vm.$el</code>也在文档内。</li><li><strong>我的理解 ：</strong><br>  此时vue的虚拟dom已经完成，实际dom的绑定也已结束，至此我们可以使用vue实例对挂载点内的dom做任何操作，<br>  可以看以下示例：  <img src="/2017/08/19/vueUnderstand/mountedvdom.png" alt="vue实例mounted虚拟dom阶段" title="vue实例mounted虚拟dom阶段">  我们可以比较下他与实际dom之间的区别  <img src="/2017/08/19/vueUnderstand/mountedvdom.png" alt="vue实例mounted虚拟dom阶段" title="vue实例mounted虚拟dom阶段"> <img src="/2017/08/19/vueUnderstand/createddom.png" alt="vue实例created dom阶段" title="vue实例created dom阶段"><strong>以上内容纯属个人理解</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;其实对于vue我一直想写点什么，一直没时间，又一直不敢码字，生怕自己错解一些东西&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;说明：vue是我真正开始使用的一个前端的mvv
      
    
    </summary>
    
      <category term="vue" scheme="http://echozw.github.io/categories/vue/"/>
    
    
      <category term="unscramble" scheme="http://echozw.github.io/tags/unscramble/"/>
    
  </entry>
  
  <entry>
    <title>hexo博文中插入图片存储的路径</title>
    <link href="http://echozw.github.io/2017/08/18/hexopicstor/"/>
    <id>http://echozw.github.io/2017/08/18/hexopicstor/</id>
    <published>2017-08-18T15:40:18.000Z</published>
    <updated>2017-11-02T14:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>相信只要用过hexo的同学都会遇到博文中插入的图片在博文正文中路径错误问题</p><footer><strong>echozh</strong></footer></blockquote><h3 id="关于hexo生成的静态html页面的套路你知道吗"><a href="#关于hexo生成的静态html页面的套路你知道吗" class="headerlink" title="关于hexo生成的静态html页面的套路你知道吗"></a>关于hexo生成的静态html页面的套路你知道吗</h3><p>首先这些生成的页面是按日期分类的</p><h3 id="你最开始使用哪种方式存储图片的"><a href="#你最开始使用哪种方式存储图片的" class="headerlink" title="你最开始使用哪种方式存储图片的"></a>你最开始使用哪种方式存储图片的</h3><p>我觉得大部分人都是在source目录下建一个images文件夹来解决的，当然这可以解决你的一时的门面，但是当你阅读博文正文时就会发现，咦，<br>怎么我的图片突然不能显示呢，这是一定的，因为在public静态资源目录下你的博文目录变了，自然就引用不到了</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="1、安装hexo-asset-image插件"><a href="#1、安装hexo-asset-image插件" class="headerlink" title="1、安装hexo-asset-image插件"></a>1、安装hexo-asset-image插件</h4><p>插件说明：<br>安装插件后每新生成一个文章就会有一个相应的文件夹生成，如下<br><img src="/2017/08/18/hexopicstor/example.png" alt="example.png" title=""><br>我们只需放入我们的资源文件即可<br><img src="/2017/08/18/hexopicstor/example2.png" alt="example2.png" title=""><br>如果是已有的博文，可以手动在_posts目录下创建一个与博文同名的文件夹即可，然后放入资源文件<br>第一步：到你的项目_config.yml文件中修改post_asset_folder属性为true<br>第二步：安装hexo-asset-image到依赖中 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-asset-image --save</div></pre></td></tr></table></figure><br>第三步：使用插件的语法<img src="/2017/08/18/hexopicstor/codeexample.png" alt="codeexample.png" title="">（这里会有一个要求hexo版本必须为hexo3及以上，如果不是就只能用markdown的语法，这样就很气了，因为用了markdown的语法我们的图片还是无法正常加载）<br>第四步：重启服务，刷新页面（估计会有人发现，咦，怎么我用了插件还是无法正常显示图片，因为修改了配置文件，必须重启服务）</p><h4 id="2、使用类似于七牛云等一些云储存平台来制作自己的图床，需要用的时候，引入外链即可"><a href="#2、使用类似于七牛云等一些云储存平台来制作自己的图床，需要用的时候，引入外链即可" class="headerlink" title="2、使用类似于七牛云等一些云储存平台来制作自己的图床，需要用的时候，引入外链即可"></a>2、使用类似于七牛云等一些云储存平台来制作自己的图床，需要用的时候，引入外链即可</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;相信只要用过hexo的同学都会遇到博文中插入的图片在博文正文中路径错误问题&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;关于hexo生成的静态html页面的套路你
      
    
    </summary>
    
      <category term="picturestore" scheme="http://echozw.github.io/categories/picturestore/"/>
    
    
      <category term="hexo" scheme="http://echozw.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git上传本地项目技巧（码云，github都可以用）</title>
    <link href="http://echozw.github.io/2017/08/18/gittrip/"/>
    <id>http://echozw.github.io/2017/08/18/gittrip/</id>
    <published>2017-08-18T10:56:43.000Z</published>
    <updated>2017-11-02T14:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="以下操作均在windows环境中进行"><a href="#以下操作均在windows环境中进行" class="headerlink" title="以下操作均在windows环境中进行"></a>以下操作均在windows环境中进行</h3><h3 id="1、进入到要上传的项目目录"><a href="#1、进入到要上传的项目目录" class="headerlink" title="1、进入到要上传的项目目录"></a>1、进入到要上传的项目目录</h3><p>首先我们需要进入到我们需要进行上传的目录下<br><img src="/2017/08/18/gittrip/firstcd.png" alt="firstcd.png" title=""></p><h3 id="2、用git命令初始化当前目录"><a href="#2、用git命令初始化当前目录" class="headerlink" title="2、用git命令初始化当前目录"></a>2、用git命令初始化当前目录</h3><p>相信只要熟悉git的人都知道初始化的意义<br><img src="/2017/08/18/gittrip/gitinit.png" alt="gitinit.png" title=""></p><h3 id="3、配置全局的name和email（已配置过的可以跳过此步骤）"><a href="#3、配置全局的name和email（已配置过的可以跳过此步骤）" class="headerlink" title="3、配置全局的name和email（已配置过的可以跳过此步骤）"></a>3、配置全局的name和email（已配置过的可以跳过此步骤）</h3><p>user.name<img src="/2017/08/18/gittrip/username.png" alt="user.name" title="user.name"></p><p>user.email<img src="/2017/08/18/gittrip/useremail.png" alt="user.email" title="user.email"></p><h3 id="4、add要上传的文件"><a href="#4、add要上传的文件" class="headerlink" title="4、add要上传的文件"></a>4、add要上传的文件</h3><p>add当前目录下的所有文件<img src="/2017/08/18/gittrip/gitaddall.png" alt="add当前目录下的所有文件" title="add当前目录下的所有文件"><br>add当前目录下的单个文件<img src="/2017/08/18/gittrip/gitaddfile.png" alt="add当前目录下的单个文件" title="add当前目录下的单个文件"></p><h3 id="5、添加注释（个人建议不要添加中文注释）"><a href="#5、添加注释（个人建议不要添加中文注释）" class="headerlink" title="5、添加注释（个人建议不要添加中文注释）"></a>5、添加注释（个人建议不要添加中文注释）</h3><img src="/2017/08/18/gittrip/gitcommit.png" alt="gitcommit.png" title=""><h3 id="6、将add的文件remote到原始仓库"><a href="#6、将add的文件remote到原始仓库" class="headerlink" title="6、将add的文件remote到原始仓库"></a>6、将add的文件remote到原始仓库</h3><img src="/2017/08/18/gittrip/gitremote.png" alt="gitremote.png" title=""><h3 id="7、按道理上来说的最后一步"><a href="#7、按道理上来说的最后一步" class="headerlink" title="7、按道理上来说的最后一步"></a>7、按道理上来说的最后一步</h3><p>这个步骤可能会出现错误<br><img src="/2017/08/18/gittrip/gitpush.png" alt="这个步骤可能会出现错误" title="这个步骤可能会出现错误"></p><h4 id="如果有提示类似before-push-should-…-pull等字样的错误时，我们需要先将仓库的版本拉取下来"><a href="#如果有提示类似before-push-should-…-pull等字样的错误时，我们需要先将仓库的版本拉取下来" class="headerlink" title="如果有提示类似before push should ….pull等字样的错误时，我们需要先将仓库的版本拉取下来"></a>如果有提示类似before push should ….pull等字样的错误时，我们需要先将仓库的版本拉取下来</h4><img src="/2017/08/18/gittrip/gitpull.png" alt="gitpull.png" title=""><h4 id="这时如果出现类似refuse等字样时说明历史仓库版本不同，我们可以使用"><a href="#这时如果出现类似refuse等字样时说明历史仓库版本不同，我们可以使用" class="headerlink" title="这时如果出现类似refuse等字样时说明历史仓库版本不同，我们可以使用"></a>这时如果出现类似refuse等字样时说明历史仓库版本不同，我们可以使用</h4><p><img src="/2017/08/18/gittrip/gitpullhis.png" alt="来强行合并仓库" title="来强行合并仓库">来强行合并仓库<br>最后再push一遍就ok了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;以下操作均在windows环境中进行&quot;&gt;&lt;a href=&quot;#以下操作均在windows环境中进行&quot; class=&quot;headerlink&quot; title=&quot;以下操作均在windows环境中进行&quot;&gt;&lt;/a&gt;以下操作均在windows环境中进行&lt;/h3&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
      <category term="git-trip" scheme="http://echozw.github.io/categories/git-trip/"/>
    
    
      <category term="git" scheme="http://echozw.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端开发中最常用的8个npm技巧</title>
    <link href="http://echozw.github.io/2017/08/03/npmSkill/"/>
    <id>http://echozw.github.io/2017/08/03/npmSkill/</id>
    <published>2017-08-03T02:43:06.000Z</published>
    <updated>2017-11-02T14:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>npm javascript的包管理器</p><footer><strong>echozh</strong></footer></blockquote><h3 id="安安装包："><a href="#安安装包：" class="headerlink" title="安安装包："></a>安安装包：</h3><ul><li>常规:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pkg</div></pre></td></tr></table></figure></li><li>速记:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i pkg</div></pre></td></tr></table></figure></li></ul><h3 id="全安装包："><a href="#全安装包：" class="headerlink" title="全安装包："></a>全安装包：</h3><ul><li>常规:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --global pkg</div></pre></td></tr></table></figure></li><li>速记:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -g pkg</div></pre></td></tr></table></figure></li></ul><h3 id="安包并包含在依赖中："><a href="#安包并包含在依赖中：" class="headerlink" title="安包并包含在依赖中："></a>安包并包含在依赖中：</h3><ul><li>常规:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --savepkg</div></pre></td></tr></table></figure></li><li>速记:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -S pkg</div></pre></td></tr></table></figure></li></ul><h3 id="安包并包含在开发依赖中："><a href="#安包并包含在开发依赖中：" class="headerlink" title="安包并包含在开发依赖中："></a>安包并包含在开发依赖中：</h3><ul><li>常规:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev pkg</div></pre></td></tr></table></figure></li><li>速记:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D pkg</div></pre></td></tr></table></figure></li></ul><p>下面开始有趣的内容</p><h3 id="1、初始化一个新包"><a href="#1、初始化一个新包" class="headerlink" title="1、初始化一个新包"></a>1、初始化一个新包</h3><p>我们都知道<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>,用来创建一个新包。<br>但是，所有问题都是匿名的，所以，我们可以用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init -y</div></pre></td></tr></table></figure>和<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init -f</div></pre></td></tr></table></figure>回到初始化</p><h3 id="2、运行测试命令"><a href="#2、运行测试命令" class="headerlink" title="2、运行测试命令"></a>2、运行测试命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm test</div></pre></td></tr></table></figure>可以简化为<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm t</div></pre></td></tr></table></figure><h3 id="3、枚举可用脚本"><a href="#3、枚举可用脚本" class="headerlink" title="3、枚举可用脚本"></a>3、枚举可用脚本</h3><p>我们运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run</div></pre></td></tr></table></figure>可以得到一个的所有可用的脚本的列表</p><h3 id="4、枚举已经安装的包"><a href="#4、枚举已经安装的包" class="headerlink" title="4、枚举已经安装的包"></a>4、枚举已经安装的包</h3><p>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm ls --depth 0</div></pre></td></tr></table></figure><br>枚举全局安装的包：使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm ls -g --depth 0</div></pre></td></tr></table></figure></p><h3 id="5、运行本地安装的可执行文件"><a href="#5、运行本地安装的可执行文件" class="headerlink" title="5、运行本地安装的可执行文件"></a>5、运行本地安装的可执行文件</h3><p>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run env</div></pre></td></tr></table></figure><br>如果你不知道本地安装的软件包放置可执行文件的地方<br>可以运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./node_modules/.bin/mocha</div></pre></td></tr></table></figure></p><h3 id="6、在网上查找你想要的包"><a href="#6、在网上查找你想要的包" class="headerlink" title="6、在网上查找你想要的包"></a>6、在网上查找你想要的包</h3><p>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm repo</div></pre></td></tr></table></figure>在浏览器中查看<br>还有<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm home</div></pre></td></tr></table></figure>命令进入主页<br>如果想打开包的主页npmjs.com,可以使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm docs</div></pre></td></tr></table></figure></p><h3 id="7、在其他脚本前后运行脚本"><a href="#7、在其他脚本前后运行脚本" class="headerlink" title="7、在其他脚本前后运行脚本"></a>7、在其他脚本前后运行脚本</h3><p>运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pretest</div></pre></td></tr></table></figure></p><h3 id="8、修改包的版本"><a href="#8、修改包的版本" class="headerlink" title="8、修改包的版本"></a>8、修改包的版本</h3><p>运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm version</div></pre></td></tr></table></figure>通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">major</div></pre></td></tr></table></figure>,<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">minor</div></pre></td></tr></table></figure>或者<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patch</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;npm javascript的包管理器&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;安安装包：&quot;&gt;&lt;a href=&quot;#安安装包：&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="npm最常用的8个技巧" scheme="http://echozw.github.io/categories/npm%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%848%E4%B8%AA%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="npm" scheme="http://echozw.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>js闭包</title>
    <link href="http://echozw.github.io/2017/07/30/jsClosure/"/>
    <id>http://echozw.github.io/2017/07/30/jsClosure/</id>
    <published>2017-07-30T02:12:05.000Z</published>
    <updated>2017-11-02T14:10:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>闭包让人既爱又恨，一方面喜欢她的变量局部化，一方面又害怕她的方向无法掌控</p><footer><strong>echozh</strong></footer></blockquote><h3 id="闭包解决经典的循环问题"><a href="#闭包解决经典的循环问题" class="headerlink" title="闭包解决经典的循环问题"></a>闭包解决经典的循环问题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"test"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原生JS实现类似于jquery的each方法</span></div><div class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">obj, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> type = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span>(obj.constructor) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">Object</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">'Object'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="built_in">Array</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">'Array'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> NodeList:</div><div class="line">                <span class="keyword">return</span> <span class="string">'NodeList'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">return</span> <span class="string">'null'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)();</div><div class="line">    <span class="keyword">if</span>(type === <span class="string">'Array'</span> || type === <span class="string">'NodeList'</span>) &#123;</div><div class="line">        <span class="comment">//由于存在类数组NodeList,所以不能直接用every</span></div><div class="line">        [].every.call(obj, <span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> callback.call(v, i, v) === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//为对象格式时返回key, value</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'Object'</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj )&#123;</div><div class="line">            <span class="keyword">if</span>(callback.call(obj[i], i, object[i]) === <span class="literal">false</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="单纯使用for循环"><a href="#单纯使用for循环" class="headerlink" title="单纯使用for循环"></a>单纯使用for循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>);</div><div class="line"><span class="keyword">var</span> ullist = ul.children;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;ullist.length;i++)&#123;</div><div class="line">    ullist[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="built_in">console</span> : ullist</div></pre></td></tr></table></figure><blockquote><p>原因：由于执行顺序，最后打印的结果肯定是会ullist的长度</p></blockquote><h3 id="解决方案一：-内部使用闭包"><a href="#解决方案一：-内部使用闭包" class="headerlink" title="解决方案一： 内部使用闭包"></a>解决方案一： 内部使用闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;ullist.length;i++)&#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">        ullist[item].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(item);</div><div class="line">    &#125;);</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>将i作为参数传入自执行函数，由于闭包会把当前传入的i贮存下来</p></blockquote><h3 id="解决方案二：使用上述的each回调，或者使用juqery的each就可以避免"><a href="#解决方案二：使用上述的each回调，或者使用juqery的each就可以避免" class="headerlink" title="解决方案二：使用上述的each回调，或者使用juqery的each就可以避免"></a>解决方案二：使用上述的each回调，或者使用juqery的each就可以避免</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">each(ullist, <span class="function"><span class="keyword">function</span>(<span class="params">i, v</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="还有很多其他的解决方案就不一一列举了，实现的方式都是大同小异，通过贮存当前变量的方案实现的"><a href="#还有很多其他的解决方案就不一一列举了，实现的方式都是大同小异，通过贮存当前变量的方案实现的" class="headerlink" title="还有很多其他的解决方案就不一一列举了，实现的方式都是大同小异，通过贮存当前变量的方案实现的"></a>还有很多其他的解决方案就不一一列举了，实现的方式都是大同小异，通过贮存当前变量的方案实现的</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;闭包让人既爱又恨，一方面喜欢她的变量局部化，一方面又害怕她的方向无法掌控&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;闭包解决经典的循环问题&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="protogenicJs" scheme="http://echozw.github.io/categories/protogenicJs/"/>
    
      <category term="closure" scheme="http://echozw.github.io/categories/protogenicJs/closure/"/>
    
    
      <category term="javascript" scheme="http://echozw.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>原生ajax</title>
    <link href="http://echozw.github.io/2017/07/30/ajax/"/>
    <id>http://echozw.github.io/2017/07/30/ajax/</id>
    <published>2017-07-30T01:36:38.000Z</published>
    <updated>2017-11-02T14:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>可能很多人已经习惯了jquery带给开发者的方便，但是我觉得熟练原生的js还是最好的</p><footer><strong>echozh</strong></footer></blockquote><h3 id="ajax的原生写法"><a href="#ajax的原生写法" class="headerlink" title="ajax的原生写法"></a>ajax的原生写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXMLHTTPRequest</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//1.创建XMLHttpRequest对象</span></div><div class="line">    <span class="comment">//这是XMLHttpReuquest对象使用中最复杂的一步</span></div><div class="line">    <span class="comment">//需要针对IE和其他类型的浏览器建立这个对象的不同方式写不同的代码</span></div><div class="line">    <span class="keyword">var</span> xmlHttpRequest;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        <span class="comment">//针对FireFox，Mozillar，Opera，Safari，IE7，IE8</span></div><div class="line">            xmlHttpRequest = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">            <span class="comment">//针对某些特定版本的mozillar浏览器的BUG进行修正</span></div><div class="line">            <span class="keyword">if</span> (xmlHttpRequest.overrideMimeType) &#123;</div><div class="line">                mlHttpRequest.overrideMimeType(<span class="string">"text/xml"</span>); </div><div class="line">            &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        <span class="comment">//针对IE6，IE5.5，IE5</span></div><div class="line">        <span class="comment">//两个可以用于创建XMLHTTPRequest对象的控件名称，保存在一个js的数组中</span></div><div class="line">        <span class="comment">//排在前面的版本较新</span></div><div class="line">        <span class="keyword">var</span> activexName = [ <span class="string">"MSXML2.XMLHTTP"</span>, <span class="string">"Microsoft.XMLHTTP"</span> ];</div><div class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; activexName.length; i++) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//取出一个控件名进行创建，如果创建成功就终止循环</span></div><div class="line">                <span class="comment">//如果创建失败，回抛出异常，然后可以继续循环，继续尝试创建</span></div><div class="line">                xmlHttpRequest = <span class="keyword">new</span> ActiveXObject(activexName[i]);</div><div class="line">                <span class="keyword">if</span>(xmlHttpRequest)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> xmlHttpRequest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> req = createXMLHTTPRequest();</div><div class="line">    <span class="keyword">if</span>(req)&#123;</div><div class="line">        req.open(<span class="string">"GET"</span>, <span class="string">"http://test.com/?keywords=手机"</span>, <span class="literal">true</span>);</div><div class="line">        req.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(req.readyState == <span class="number">4</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(req.status == <span class="number">200</span>)&#123;</div><div class="line">                    alert(<span class="string">"success"</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    alert(<span class="string">"error"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        req.send(<span class="literal">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> req = createXMLHTTPRequest();</div><div class="line">    <span class="keyword">if</span>(req)&#123;</div><div class="line">        req.open(<span class="string">"POST"</span>, <span class="string">"http://test.com/"</span>, <span class="literal">true</span>);</div><div class="line">        req.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded; charset=gbk;"</span>);</div><div class="line">        req.send(<span class="string">"keywords=手机"</span>);</div><div class="line">        req.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(req.readyState == <span class="number">4</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(req.status == <span class="number">200</span>)&#123; </div><div class="line">                    alert(<span class="string">"success"</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    alert(<span class="string">"error"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;可能很多人已经习惯了jquery带给开发者的方便，但是我觉得熟练原生的js还是最好的&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;echozh&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;h3 id=&quot;ajax的原生写法&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="protogenicJs" scheme="http://echozw.github.io/categories/protogenicJs/"/>
    
      <category term="ajax" scheme="http://echozw.github.io/categories/protogenicJs/ajax/"/>
    
    
      <category term="javascript" scheme="http://echozw.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
